class {
	handleChange(newValue, el) {
		alert(`${newValue}`)
	}
}


<div>
	<h3>自定义标签 for ${input.name}</h3>
</div>
<test-custom-tag name="欢" age="234"/>
<counter on-change('handleChange')/>

<div>
	<label for:scope="name">Name</label>
	<input id:scope="name" value="tom"/>
</div>


// 自定义标签使得可以不再使用<include>来引入另一个组件，而是直接使用<tagName>
// 可以通过 npm install 第三方的标签到 dependencies(注意不是Devdepencies) 下。然后直接使用<thirdTagName>。

// 给定一个模板，marko将会自动的去找出所有与之关联的 taglibs, 并自动导入taglibs关联的依赖到根目录的packahr.json文件。
// 这一过程找的文件其实就是前边用到的 marko.json


// 如果你不想一个folder或者node_modules中的一个包被找到，那么可以使用
// require('marko/compiler').taglibFinder.excludeDir(dirPath); //针对folder
// require('marko/compiler').taglibFinder.excludePackage(packageName); // 针对node_modules中的package

// marko.json syntax

//"<my-custom-tag>":{
//	"renderer":"./index.marko",
//	"@name": "string",
//	"@age": "number"
//}


